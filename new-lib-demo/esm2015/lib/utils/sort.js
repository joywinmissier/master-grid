export class Sort {
    constructor() {
        this.sortOrder = 1;
        this.collator = new Intl.Collator(undefined, {
            numeric: true,
            sensitivity: "base",
        });
    }
    startSort(property, order, type = "") {
        if (order === "desc") {
            this.sortOrder = -1;
        }
        return (a, b) => {
            if (a.hasOwnProperty('subitems')) {
                this.recursiveSort(a['subitems'], property, order);
            }
            if (b.hasOwnProperty('subitems')) {
                this.recursiveSort(a['subitems'], property, order);
            }
            return this.collator.compare(a[property], b[property]) * this.sortOrder;
        };
    }
    recursiveSort(listToSort, sortingProperty, sortOrder) {
        sortOrder == 'asc' ? listToSort.sort((firstBSubitem, secondfBSubitem) => firstBSubitem[sortingProperty] - secondfBSubitem[sortingProperty])
            : listToSort.sort((descFirstItem, descsecondItem) => descsecondItem[sortingProperty] - descFirstItem[sortingProperty]);
        if (listToSort.length > 0) {
            listToSort.map((listSort) => {
                if (listSort.hasOwnProperty('subitems')) {
                    this.recursiveSort(listSort['subitems'], sortingProperty, sortOrder);
                }
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25ldy1saWItZGVtby9zcmMvbGliL3V0aWxzL3NvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLElBQUk7SUFTYjtRQVBRLGNBQVMsR0FBRyxDQUFDLENBQUM7UUFDZCxhQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtZQUM1QyxPQUFPLEVBQUUsSUFBSTtZQUNiLFdBQVcsRUFBRSxNQUFNO1NBQ3RCLENBQUMsQ0FBQztJQUlILENBQUM7SUFFTSxTQUFTLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLEdBQUcsRUFBRTtRQUN2QyxJQUFJLEtBQUssS0FBSyxNQUFNLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUN2QjtRQUNELE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFFUCxJQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxFQUFDLFFBQVEsRUFBQyxLQUFLLENBQUMsQ0FBQTthQUNqRDtZQUNKLElBQUcsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDNUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUMsUUFBUSxFQUFDLEtBQUssQ0FBQyxDQUFBO2FBQ2pEO1lBQ0wsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUVoRixDQUFDLENBQUE7SUFDTCxDQUFDO0lBRUQsYUFBYSxDQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUMsU0FBUztRQUMzQyxTQUFTLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxFQUFFLGVBQWUsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUMxSCxDQUFDLENBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsRUFBRSxjQUFjLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsR0FBRyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUV4SSxJQUFHLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFDO1lBQ3JCLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUMsRUFBRTtnQkFDdkIsSUFBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFDO29CQUN0QyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBQyxlQUFlLEVBQUMsU0FBUyxDQUFDLENBQUM7aUJBQ25FO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7Q0FDViIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBTb3J0IHtcclxuXHJcbiAgICBwcml2YXRlIHNvcnRPcmRlciA9IDE7XHJcbiAgICBwcml2YXRlIGNvbGxhdG9yID0gbmV3IEludGwuQ29sbGF0b3IodW5kZWZpbmVkLCB7XHJcbiAgICAgICAgbnVtZXJpYzogdHJ1ZSxcclxuICAgICAgICBzZW5zaXRpdml0eTogXCJiYXNlXCIsXHJcbiAgICB9KTtcclxuICBcclxuICBcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgfVxyXG4gIFxyXG4gICAgcHVibGljIHN0YXJ0U29ydChwcm9wZXJ0eSwgb3JkZXIsIHR5cGUgPSBcIlwiKSB7XHJcbiAgICAgICAgaWYgKG9yZGVyID09PSBcImRlc2NcIikge1xyXG4gICAgICAgICAgICB0aGlzLnNvcnRPcmRlciA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKGEsIGIpID0+IHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgIGlmKGEuaGFzT3duUHJvcGVydHkoJ3N1Yml0ZW1zJykgKXtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjdXJzaXZlU29ydChhWydzdWJpdGVtcyddLHByb3BlcnR5LG9yZGVyKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICBpZihiLmhhc093blByb3BlcnR5KCdzdWJpdGVtcycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY3Vyc2l2ZVNvcnQoYVsnc3ViaXRlbXMnXSxwcm9wZXJ0eSxvcmRlcilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xsYXRvci5jb21wYXJlKGFbcHJvcGVydHldLCBiW3Byb3BlcnR5XSkgKiB0aGlzLnNvcnRPcmRlcjtcclxuICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZWN1cnNpdmVTb3J0KGxpc3RUb1NvcnQsIHNvcnRpbmdQcm9wZXJ0eSxzb3J0T3JkZXIpe1xyXG4gICAgICAgICAgICBzb3J0T3JkZXIgPT0gJ2FzYycgPyAgIGxpc3RUb1NvcnQuc29ydCgoZmlyc3RCU3ViaXRlbSwgc2Vjb25kZkJTdWJpdGVtKSA9PiBmaXJzdEJTdWJpdGVtW3NvcnRpbmdQcm9wZXJ0eV0gLSBzZWNvbmRmQlN1Yml0ZW1bc29ydGluZ1Byb3BlcnR5XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogICBsaXN0VG9Tb3J0LnNvcnQoKGRlc2NGaXJzdEl0ZW0sIGRlc2NzZWNvbmRJdGVtKSA9PiBkZXNjc2Vjb25kSXRlbVtzb3J0aW5nUHJvcGVydHldIC0gZGVzY0ZpcnN0SXRlbVtzb3J0aW5nUHJvcGVydHldKTtcclxuICAgICBcclxuICAgICAgICAgICAgICAgIGlmKGxpc3RUb1NvcnQubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdFRvU29ydC5tYXAoKGxpc3RTb3J0KT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihsaXN0U29ydC5oYXNPd25Qcm9wZXJ0eSgnc3ViaXRlbXMnKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY3Vyc2l2ZVNvcnQobGlzdFNvcnRbJ3N1Yml0ZW1zJ10sc29ydGluZ1Byb3BlcnR5LHNvcnRPcmRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gIH0iXX0=