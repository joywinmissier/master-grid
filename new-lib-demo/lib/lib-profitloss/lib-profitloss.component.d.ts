import { OnInit, EventEmitter } from '@angular/core';
import { MatSelect } from '@angular/material/select';
import { FilterConfiguration } from '../interface/plview.model';
import { NewLibDemoService } from '../new-lib-demo.service';
import * as ɵngcc0 from '@angular/core';
export declare class LibProfitlossComponent implements OnInit {
    private libService;
    constructor(libService: NewLibDemoService);
    tableItems: any[];
    numberOfDuration: number;
    headerName: string;
    lastRowData: any;
    isFirstSticky: boolean;
    isLastSticky: boolean;
    editFields: boolean;
    stickHeader: boolean;
    filterJson: FilterConfiguration;
    resizeColumn: any;
    notifyDataChange: EventEmitter<any>;
    duration: any[];
    rowHeader: any[];
    sampleRow: any[];
    tempData: any;
    columnName: string;
    orderType: string;
    str: string;
    clickedInput: any;
    clickedYear: string;
    clickedName: string;
    previousValue: string;
    count: number;
    changedData: any;
    previousIndex: any;
    deepSortRange: boolean;
    previousList: any;
    someData: any[];
    selectedYear: any[];
    exportingItems: any[];
    updatedTotal: any;
    minAmountRange: any;
    maxAmountRange: any;
    rangeSelection: any;
    selectedValue: string;
    flattenObject: any[];
    dataForExcelSheet: any[];
    priceRangeData: any[];
    priceRange: ({
        min: number;
        max: number;
        range: string;
    } | {
        min: number;
        max: string;
        range: string;
    })[];
    ngOnInit(): void;
    dynamicYears(durationYears: any): void;
    manipulateData(listOfItems: any, start?: number, oldList?: any): void;
    expandRow(item: any): void;
    getSortOrderDetails(event: any): void;
    restFilter(): void;
    resetDropdown(event: any): void;
    editData(editValue: any, list: any, index: any, categoryName: any): void;
    closeEdit(jsonList: any, yearValue: any): void;
    modifyData(jsonList: any, yearValue: any): void;
    exportSelect(chosenRow: any, completed: boolean): void;
    exportData(): void;
    getExcelRowValues(flatData: any): void;
    someComplete(rowItems: any): boolean;
    stopFocus(): void;
    onSearchChange(searchValue: string, nonModifiedData: any): void;
    resetClick(): void;
    getUpdatedTotal(totalValue: any, list: any): any;
    valueChange(yearNames: any, event: any, yearIndex: any): void;
    priceFilter(min: any, max: any, range: any): void;
    clearFilter(): void;
    resetPlaceholder(selectedData: MatSelect): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LibProfitlossComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LibProfitlossComponent, "lib-lib-profitloss", never, { "tableItems": "tableItems"; "headerName": "headerName"; "priceRangeData": "priceRangeData"; "numberOfDuration": "numberOfDuration"; "lastRowData": "lastRowData"; "isFirstSticky": "isFirstSticky"; "isLastSticky": "isLastSticky"; "editFields": "editFields"; "stickHeader": "stickHeader"; "filterJson": "filterJson"; "resizeColumn": "resizeColumn"; }, { "notifyDataChange": "notifyDataChange"; }, never, never>;
}

//# sourceMappingURL=lib-profitloss.component.d.ts.map